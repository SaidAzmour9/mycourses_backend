generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  isInstructor Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courses  CourseUser[]
  favorite Favorite[]
  review Review[]
  
}

model Teacher{
  id          String       @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courses     Course[]
}

model Course {
  id          String       @id @default(uuid())
  name        String
  description String
  teacher     Teacher @relation(fields: [teacherId], references: [id])
  teacherId   String
  students    CourseUser[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isPublished Boolean @default(false)
  Category    Category[]
  Level       Level[]
  Language    Language[]
  Tags        Tags[]
  favorite Favorite[]
  review Review[]
}

model CourseUser{
  id          String       @id @default(uuid())
  user      User @relation(fields: [userId], references: [id])
  userId      String
  course     Course @relation(fields: [courseId], references: [id])
  courseId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
}

model Category {
  id          String @id @default(uuid())
  name        String @unique
  subCategories SubCategory[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]
}


model SubCategory {
  id          String       @id @default(uuid())
  name        String
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}


model Level{
  id          String       @id @default(uuid())
  name        String
  courses Course[]
}

model Language{
  id          String       @id @default(uuid()) 
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  courses     Course[]
} 

model Tags{
  id          String       @id @default(uuid())
  name        String
  courses     Course[]
}

model Favorite{
  id          String       @id @default(uuid())
  user      User @relation(fields: [userId], references: [id])
  userId      String
  course     Course @relation(fields: [courseId], references: [id])
  courseId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review{
  id          String       @id @default(uuid())
  user      User @relation(fields: [userId], references: [id])
  userId      String
  course     Course @relation(fields: [courseId], references: [id])
  courseId   String
  rating     Int
  comment    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}